package com.edifixio.jsf.tag;import java.io.IOException;import java.util.Iterator;import javax.faces.component.UIComponent;import javax.faces.context.FacesContext;import javax.faces.context.ResponseWriter;import javax.faces.render.Renderer;public abstract class RendererBase extends Renderer{	public void decode(FacesContext context, UIComponent component)	{		if (context == null)			throw new NullPointerException("Context must not be null");		if (component == null)			throw new NullPointerException("Component must not be null");		if (!getComponentClass().isInstance(component))			throw new IllegalArgumentException((new StringBuilder()).append(					"Component must be of type ").append(					getComponentClass().getName()).toString());		preDecode(context, component);		if (component.isRendered())			doDecode(context, component);	}	protected void preDecode(FacesContext facescontext, UIComponent uicomponent)	{	}	protected void preEncodeBegin(FacesContext facescontext,			UIComponent uicomponent)	throws IOException	{	}	public void encodeBegin(FacesContext context, UIComponent component)	throws IOException	{		if (context == null)			throw new NullPointerException("Context must not be null");		if (component == null)			throw new NullPointerException("Component must not be null");		if (!getComponentClass().isInstance(component))			throw new IllegalArgumentException((new StringBuilder()).append(					"Component must be of type ").append(					getComponentClass().getName()).toString());		preEncodeBegin(context, component);		if (component.isRendered())		{			ResponseWriter writer = context.getResponseWriter();			doEncodeBegin(writer, context, component);		}	}	public void encodeChildren(FacesContext context, UIComponent component)	throws IOException	{		if (context == null)			throw new NullPointerException("Context must not be null");		if (component == null)			throw new NullPointerException("Component must not be null");		if (!getComponentClass().isInstance(component))			throw new IllegalArgumentException((new StringBuilder()).append(					"Component must be of type ").append(					getComponentClass().getName()).toString());		preEncodeBegin(context, component);		if (component.isRendered())		{			ResponseWriter writer = context.getResponseWriter();			doEncodeChildren(writer, context, component);		}	}	public void encodeEnd(FacesContext context, UIComponent component)	throws IOException	{		if (context == null)			throw new NullPointerException("Context must not be null");		if (component == null)			throw new NullPointerException("Component must not be null");		if (!getComponentClass().isInstance(component))			throw new IllegalArgumentException((new StringBuilder()).append(					"Component must be of type ").append(					getComponentClass().getName()).toString());		if (component.isRendered())		{			ResponseWriter writer = context.getResponseWriter();			doEncodeEnd(writer, context, component);		}	}	protected abstract Class getComponentClass();	protected void doDecode(FacesContext facescontext, UIComponent uicomponent)	{	}	protected void doEncodeBegin(ResponseWriter responsewriter,			FacesContext facescontext, UIComponent uicomponent)	throws IOException	{	}	protected void doEncodeChildren(ResponseWriter responsewriter,			FacesContext facescontext, UIComponent uicomponent)	throws IOException	{	}	protected void doEncodeEnd(ResponseWriter responsewriter,			FacesContext facescontext, UIComponent uicomponent)	throws IOException	{	}	public void renderChildren(FacesContext facesContext, UIComponent component)	throws IOException	{		if (component.getChildCount() > 0)		{			UIComponent child;			for (Iterator it = component.getChildren().iterator(); it.hasNext(); renderChild(					facesContext, child))				child = (UIComponent) it.next();		}	}	public void renderChild(FacesContext facesContext, UIComponent child)	throws IOException	{		if (!child.isRendered())			return;		child.encodeBegin(facesContext);		if (child.getRendersChildren())			child.encodeChildren(facesContext);		else			renderChildren(facesContext, child);		child.encodeEnd(facesContext);	}}